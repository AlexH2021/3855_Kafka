version: '3.3'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    restart: always
    ports:
      - "2181"
    hostname: zookeeper
    volumes: 
      - ./zookeeper/data:/opt/zookeeper-3.4.13/data
  
  kafka:
    image: wurstmeister/kafka
    command: [start-kafka.sh]
    restart: always
    ports:
      - "9092:9092"
    hostname: kafka
    environment:
      KAFKA_CREATE_TOPICS: "events:1:1" # topic:partition:replicas
      KAFKA_ADVERTISED_HOST_NAME: kafka-3855.eastus.cloudapp.azure.com # docker-machine ip
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://kafka-3855.eastus.cloudapp.azure.com:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG_DIRS: /kafka/kafka-logs
      KAFKA_BROKER_ID: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./kafka:/kafka/kafka-logs
    depends_on:
      - "zookeeper"
  
  db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: 'example'
      MYSQL_USER: 'user'
      MYSQL_PASSWORD: 'password'
      MYSQL_ROOT_PASSWORD: 'password'
    ports:
      - '3306:3306'
    expose:
      - '3306'
    volumes:
      - ./my-db:/var/lib/mysql

  audit_log:
    container_name: audit
    build: ../audit/
    image: audit:latest
    ports:
      - "8110"
    networks:
      - "api.network"
    restart: unless-stopped
    depends_on:
      - kafka
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/config/audit_log:/config
      - /home/azureuser/logs:/logs

  processing:
    container_name: processing
    build: ../processing/
    image: processing:latest
    ports:
      - "8100"
    networks:
      - "api.network"
    restart: unless-stopped
    depends_on:
      - storage
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/config/processing:/config
      - /home/azureuser/logs:/logs
      - ./processing-db:/data

  receiver:
    container_name: receiver
    build: ../receiver/
    image: receiver:latest
    ports:
      - "8080"
    networks:
      - "api.network"
    restart: unless-stopped
    depends_on:
      - kafka
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/config/receiver:/config
      - /home/azureuser/logs:/logs
    
  storage:
    container_name: storage
    build: ../storage/
    image: storage:latest
    ports:
      - "8090"
    networks:
      - "api.network"
    restart: unless-stopped
    depends_on:
      - kafka
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/config/storage:/config
      - /home/azureuser/logs:/logs

  dashboard:
    container_name: dashboard
    build: ../dashboard-ui
    image: dashboard:latest
    ports:
      - "3000"
    networks:
      - "api.network"
    restart: unless-stopped
    depends_on:
      - audit_log
      - processing

  health-check:
    container_name: health-check
    build: ../healthcheck
    image: health-check:latest
    ports:
      - "8120:8120"
    restart: unless-stopped
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/config/health:/config
      - /home/azureuser/logs:/logs
      - ./health_data:/data
  
  nginx:
    image: nginx:latest
    # Connects the conf file of the container to the conf file in our folder
    volumes:
    - /home/azureuser/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    # It will start up the nginx only when all api containers have started
    depends_on:
    - "receiver"
    - "storage"
    - "processing"
    - "audit_log"
    - "dashboard"
    # Connects the port 80 of the nginx container to localhost:80 or localhost
    ports:
    - "80:80"
    networks:
    - "api.network"
    restart: unless-stopped

networks:
  api.network: